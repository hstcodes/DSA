// O(N) time O(1) space
int calculate(string s) {
        stringstream ss("+" + s);
        char op;
        int n, last, ans = 0;
        while (ss >> op >> n) {
            if (op == '+' || op == '-') {
                n = op == '+' ? n : -n;
                ans += n;
            } else {
                n = op == '*' ? last * n : last / n;
                ans = ans - last + n; // simulate a stack by recovering last values
            }
            last = n;
        }
        return ans;
}

/* with stack*

#include <iostream>
#include <sstream>
#include <stack>

int calculate(std::string s) {
    std::stringstream ss("+" + s);
    char op;
    int n, ans = 0;
    std::stack<int> operandStack;

    while (ss >> op >> n) {
        if (op == '+' || op == '-') {
            n = (op == '+') ? n : -n;
            ans += n;
        } else {
            // Handle multiplication and division using a stack
            int last = operandStack.top();
            operandStack.pop();

            n = (op == '*') ? last * n : last / n;
            operandStack.push(n);

            ans = ans - last + n;
        }
        operandStack.push(n);
    }

    return ans;
}

int main() {
    std::string expression = "+720 +320 *31";
    int result = calculate(expression);
    std::cout << "Result: " << result << std::endl;

    return 0;
}

